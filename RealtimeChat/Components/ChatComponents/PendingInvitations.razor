@* PendingInvitations.razor *@
@using RealtimeChat.Data
@using RealtimeChat.Hubs
@using RealtimeChat.Services
@inject IChatService ChatService
@inject Microsoft.AspNetCore.SignalR.Client.HubConnection HubConnection
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudList T="RoomInvitation" Dense="true">
    @if (Invitations.Any())
    {
        @foreach (var invitation in Invitations)
        {
            <MudListItem>
                <MudGrid>
                    <MudItem xs="8">
                        <MudText Typo="Typo.body1">
                            Invitation to <strong>@invitation.ChatRoom.Name</strong> from @(invitation.Inviter.DisplayName ?? invitation.Inviter.Email)
                        </MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                            Invited on @invitation.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy HH:mm")
                        </MudText>
                    </MudItem>
                    <MudItem xs="4" Class="d-flex justify-end">
                        <MudButtonGroup Variant="Variant.Outlined">
                            <MudButton Size="Size.Small"
                                       Color="Color.Success"
                                       OnClick="@(() => AcceptInvitation(invitation.Id))"
                                       Disabled="@(invitation.Status != InvitationStatus.Pending)">
                                Accept
                            </MudButton>
                            <MudButton Size="Size.Small"
                                       Color="Color.Error"
                                       OnClick="@(() => DeclineInvitation(invitation.Id))"
                                       Disabled="@(invitation.Status != InvitationStatus.Pending)">
                                Decline
                            </MudButton>
                        </MudButtonGroup>
                    </MudItem>
                </MudGrid>
            </MudListItem>
        }
    }
    else
    {
        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="pa-2">
            No pending invitations.
        </MudText>
    }
</MudList>

@code {
    [Parameter] public List<RoomInvitation> Invitations { get; set; } = new();
    [Parameter] public EventCallback OnInvitationAccepted { get; set; }
    [Parameter] public EventCallback OnInvitationDeclined { get; set; }
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            currentUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }
        else
        {
            NavigationManager.NavigateTo("Account/Login");
        }
    }

    private async Task AcceptInvitation(int invitationId)
    {
        if (string.IsNullOrEmpty(currentUserId))
        {
            Snackbar.Add("User not authenticated.", Severity.Error);
            return;
        }

        try
        {
            if (await ChatService.AcceptInvitationAsync(invitationId, currentUserId))
            {
                await HubConnection.SendAsync("AcceptRoomInvitation", invitationId);
                Snackbar.Add("Invitation accepted! You've joined the room.", Severity.Success);
                await OnInvitationAccepted.InvokeAsync();
            }
            else
            {
                Snackbar.Add("Failed to accept invitation.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error accepting invitation: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeclineInvitation(int invitationId)
    {
        if (string.IsNullOrEmpty(currentUserId))
        {
            Snackbar.Add("User not authenticated.", Severity.Error);
            return;
        }

        try
        {
            if (await ChatService.DeclineInvitationAsync(invitationId, currentUserId))
            {
                Snackbar.Add("Invitation declined.", Severity.Info);
                await OnInvitationDeclined.InvokeAsync();
            }
            else
            {
                Snackbar.Add("Failed to decline invitation.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error declining invitation: {ex.Message}", Severity.Error);
        }
    }
}