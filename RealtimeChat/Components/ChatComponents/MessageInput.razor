@using RealtimeChat.Hubs
@using RealtimeChat.Models
@inject Microsoft.AspNetCore.SignalR.Client.HubConnection HubConnection
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<div class="message-input-container mt-4">
    <MudPaper Class="pa-3" Elevation="2">
        <MudGrid AlignItems="End">
            <MudItem xs="12" sm="10">
                <MudTextField @bind-Value="message"
                              Label="Type a message"
                              Variant="Variant.Outlined"
                              Lines="3"
                              MaxLines="5"
                              OnKeyDown="@HandleKeyPress"
                              Immediate="true"
                              Class="message-input-field"
                              Placeholder="@GetPlaceholderText()" />
            </MudItem>
            <MudItem xs="12" sm="2" Class="d-flex align-items-center justify-end">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Send"
                           OnClick="SendMessage"
                           Disabled="@(string.IsNullOrWhiteSpace(message) || isTyping)"
                           Class="send-button">
                    Send
                </MudButton>
            </MudItem>
        </MudGrid>
        <MudGrid Class="mt-2">
            <MudItem xs="12">
                <div class="d-flex align-center">
                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mr-2">
                        Press Enter to send, Shift+Enter for new line
                    </MudText>
                    <MudSpacer />
                    @if (isTyping)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="ml-2">
                            Sending...
                        </MudText>
                    }
                </div>
            </MudItem>
        </MudGrid>
    </MudPaper>
</div>

<style>
    .message-input-container {
        position: sticky;
        bottom: 0;
        /* background: white; */
        z-index: 10;
    }

    .message-input-field {
        width: 100%;
    }

    .send-button {
        height: 46px;
        min-width: 80px;
    }
</style>

@code {
    [Parameter] public int RoomId { get; set; }
    [Parameter] public string? RecipientId { get; set; }
    [Parameter] public bool IsPrivateChat { get; set; } = false;

    private string message = string.Empty;
    private bool isTyping = false;
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            await EnsureHubConnection();
        }
    }

    private async Task EnsureHubConnection()
    {
        if (HubConnection.State == HubConnectionState.Disconnected)
        {
            try
            {
                HubConnection.Closed += async (error) =>
                {
                    Snackbar.Add("Connection lost. Reconnecting...", Severity.Warning);
                    await Task.Delay(new Random().Next(0, 5) * 1000);
                    await HubConnection.StartAsync();
                    if (!IsPrivateChat)
                    {
                        await HubConnection.SendAsync("JoinRoom", RoomId);
                    }
                    Snackbar.Add("Reconnected to chat!", Severity.Success);
                };

                await HubConnection.StartAsync();
                if (!IsPrivateChat)
                {
                    await HubConnection.SendAsync("JoinRoom", RoomId);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error connecting to chat: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(message) || isTyping) return;
        isTyping = true;
        StateHasChanged();

        try
        {
            await EnsureHubConnection();
            if (IsPrivateChat && RecipientId != null)
            {
                await HubConnection.SendAsync("SendPrivateMessage", RecipientId, message);
            }
            else
            {
                await HubConnection.SendAsync("SendMessageToRoom", RoomId, message);
            }
            message = string.Empty;
            Snackbar.Add("Message sent!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error sending message: {ex.Message}", Severity.Error);
        }
        finally
        {
            isTyping = false;
            StateHasChanged();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private string GetPlaceholderText()
    {
        return IsPrivateChat ? "Send a private message..." : "Type your message here...";
    }
}