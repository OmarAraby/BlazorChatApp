@* RoomSearchDialog.razor *@
@inject IChatService ChatService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager


<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 400px;">
            <MudText Typo="Typo.h6" GutterBottom="true">Search Rooms</MudText>

            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="searchTerm"
                                  Label="Search Rooms"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  OnKeyUp="@SearchRooms"
                                  Immediate="true"
                                  Placeholder="Search by name or description..." />
                </MudItem>

                <MudItem xs="12">
                    @if (isSearching)
                    {
                        <div class="d-flex justify-center pa-4">
                            <MudProgressCircular Indeterminate="true" />
                        </div>
                    }
                    else if (searchResults.Any())
                    {
                        <MudText Typo="Typo.subtitle2" Class="mb-2">Search Results:</MudText>
                        <MudList T="ChatRoom" Clickable="true" Dense="true">
                            @foreach (var room in searchResults)
                            {
                                <MudListItem OnClick="@(() => SelectRoom(room))" Disabled="@IsRoomJoinDisabled(room)">
                                    <div class="d-flex align-center justify-space-between">
                                        <div class="d-flex align-center">
                                            <MudAvatar Size="Size.Small" Class="mr-2" Color="@(room.IsPrivate ? Color.Secondary : Color.Primary)">
                                                <MudIcon Icon="@(room.IsPrivate ? Icons.Material.Filled.Lock : Icons.Material.Filled.Forum)" />
                                            </MudAvatar>
                                            <div>
                                                <MudText>@room.Name</MudText>
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                    @(room.Description ?? "No description")
                                                </MudText>
                                            </div>
                                        </div>
                                        <MudIconButton Icon="@Icons.Material.Filled.Login"
                                                       Size="Size.Small"
                                                       Color="Color.Primary"
                                                       Disabled="@IsRoomJoinDisabled(room)" />
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    }
                    else if (!string.IsNullOrWhiteSpace(searchTerm) && !isSearching)
                    {
                        <MudAlert Severity="Severity.Info">
                            No rooms found matching "@searchTerm"
                        </MudAlert>
                    }
                    else
                    {
                        <MudText Color="Color.Secondary" Align="Align.Center" Class="pa-4">
                            Start typing to search for rooms
                        </MudText>
                    }
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    private string searchTerm = string.Empty;
    private List<ChatRoom> searchResults = new();
    private bool isSearching = false;
    private Timer? searchTimer;
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task SearchRooms()
    {
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ => await PerformSearch(), null, 300, Timeout.Infinite);
    }

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchTerm) || searchTerm.Length < 2)
        {
            searchResults.Clear();
            await InvokeAsync(StateHasChanged);
            return;
        }

        isSearching = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            searchResults = await ChatService.SearchRoomsAsync(searchTerm, userId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error searching rooms: {ex.Message}", Severity.Error);
            searchResults.Clear();
        }
        finally
        {
            isSearching = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private bool IsRoomJoinDisabled(ChatRoom room)
    {
        if (userId == null) return true;
        bool isMember = room.Members.Any(m => m.UserId == userId);
        return room.IsPrivate && !isMember; // Disable if private and not a member
    }

    private async Task SelectRoom(ChatRoom room)
    {
        if (userId == null) return;

        bool isMember = room.Members.Any(m => m.UserId == userId);
        if (room.IsPrivate && !isMember)
        {
            Snackbar.Add("You are not a member of this private room.", Severity.Warning);
            return;
        }

        if (!isMember && !room.IsPrivate)
        {
            if (await ChatService.JoinPublicRoomAsync(room.Id, userId))
            {
                Snackbar.Add("Successfully joined the room!", Severity.Success);
                NavigationManager.NavigateTo($"/chat/{room.Id}");
            }
            else
            {
                Snackbar.Add("Failed to join the room.", Severity.Warning);
            }
        }
        else
        {
            NavigationManager.NavigateTo($"/chat/{room.Id}");
        }

        MudDialog.Close();
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}