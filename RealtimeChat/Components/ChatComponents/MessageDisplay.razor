@using RealtimeChat.Data
@using RealtimeChat.Dtos
@using RealtimeChat.Hubs
@using RealtimeChat.Models
@using RealtimeChat.Services
@inject IChatService ChatService
@inject Microsoft.AspNetCore.SignalR.Client.HubConnection HubConnection
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<div class="message-display-container">
    <div class="message-list" @ref="messageContainerRef">
        @if (messages.Any())
        {
            @foreach (var message in messages)
            {
                <div class="@GetMessageClass(message)">
                    <MudCard Elevation="0" Class="@GetMessageCardClass(message)" Style="background-color: var(--mud-palette-background) !important;">
                        <MudCardContent Class="py-2 px-3 d-flex flex-column">
                            <MudGrid>
                                <MudItem xs="12" Class="d-flex align-center">
                                    <MudAvatar Size="Size.Small" Class="mr-2" Color="@GetAvatarColor(message.Sender.Id)">
                                        @GetInitials(message.Sender)
                                    </MudAvatar>
                                    <MudText Typo="Typo.body1" Class="font-weight-bold" Style="color: var(--mud-palette-text-contrast) !important;">
                                        @(message.Sender.DisplayName ?? message.Sender.UserName)
                                    </MudText>
                                    <MudText Typo="Typo.caption" Class="ml-2" Color="Color.Secondary">
                                        @message.SentAt.ToLocalTime().ToString("HH:mm")
                                    </MudText>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudText Typo="Typo.body1" Class="message-content" Style="color: var(--mud-palette-text-contrast) !important;">
                                        @message.Content
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </div>
            }
        }
        else
        {
            <MudText Align="Align.Center" Class="my-4" Color="Color.Secondary">
                No messages yet. Start the conversation!
            </MudText>
        }
    </div>
</div>

<style>
    .message-display-container {
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .message-list {
        overflow-y: auto;
        flex-grow: 1;
        padding: 10px;
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .message-row {
        display: flex;
        margin-bottom: 8px;
    }

    .message-row-mine {
        justify-content: flex-end;
    }

    .message-card {
        max-width: 80%;
        border-radius: 12px;
        background-color: var(--mud-palette-background) !important; /* Override any custom background */
        color: var(--mud-palette-text-contrast) !important; /* Ensure readable text */
    }

    .message-card-mine {
        background-color: var(--mud-palette-primary) !important; /* Theme-aware highlight */
        color: var(--mud-palette-text-contrast) !important; /* High-contrast text */
    }

    .message-content {
        white-space: pre-wrap;
        word-break: break-word;
    }
</style>

@code {
    [Parameter] public int RoomId { get; set; }
    [Parameter] public string? RecipientId { get; set; }
    [Parameter] public bool IsPrivateChat { get; set; } = false;

    private List<Message> messages = new();
    private string? currentUserId;
    private ElementReference messageContainerRef;
    private Dictionary<string, Color> userColors = new();
    private Random random = new Random();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            await LoadMessages();
            await SetupSignalR();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadMessages();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || messages.Count > 0)
        {
            await ScrollToBottom();
        }
    }

    private async Task LoadMessages()
    {
        try
        {
            if (IsPrivateChat && RecipientId != null && currentUserId != null)
            {
                messages = await ChatService.GetPrivateMessagesAsync(currentUserId, RecipientId);
            }
            else
            {
                messages = await ChatService.GetRoomMessagesAsync(RoomId);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading messages: {ex.Message}");
            Snackbar.Add($"Error loading messages: {ex.Message}", Severity.Error);
        }
    }

    private async Task SetupSignalR()
    {
        if (HubConnection.State == HubConnectionState.Disconnected)
        {
            try
            {
                HubConnection.Closed += async (error) =>
                {
                    Console.WriteLine("Connection lost. Reconnecting...");
                    await Task.Delay(new Random().Next(0, 5) * 1000);
                    await HubConnection.StartAsync();
                    if (!IsPrivateChat)
                    {
                        await HubConnection.SendAsync("JoinRoom", RoomId);
                    }
                };

                await HubConnection.StartAsync();
                if (!IsPrivateChat)
                {
                    await HubConnection.SendAsync("JoinRoom", RoomId);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
                Snackbar.Add($"Error connecting to chat: {ex.Message}", Severity.Error);
                return;
            }
        }

        if (IsPrivateChat)
        {
            HubConnection.On<dynamic>("ReceivePrivateMessage", async (messageData) =>
            {
                if ((messageData.SenderId == currentUserId && messageData.RecipientId == RecipientId) ||
                    (messageData.SenderId == RecipientId && messageData.RecipientId == currentUserId))
                {
                    await AddNewMessage(messageData);
                }
            });
        }
        else
        {
            HubConnection.On<MessageDto>("ReceiveRoomMessage", async (messageData) =>
            {
                if (messageData.RoomId == RoomId)
                {
                    await AddNewMessage(messageData);
                }
            });
        }
    }

    private async Task AddNewMessage(MessageDto messageData)
    {
        try
        {
            var newMessage = new Message
            {
                Id = messageData.Id,
                Content = messageData.Content,
                SenderId = messageData.SenderId,
                SentAt = messageData.SentAt,
                Sender = new ApplicationUser
                {
                    Id = messageData.SenderId,
                    DisplayName = messageData.SenderName
                }
            };

            if (IsPrivateChat)
            {
                newMessage.RecipientId = messageData.RecipientId;
                newMessage.IsPrivate = true;
            }
            else
            {
                newMessage.ChatRoomId = messageData.RoomId;
            }

            messages.Add(newMessage);
            await InvokeAsync(StateHasChanged);
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing message: {ex.Message}");
            Snackbar.Add($"Error processing message: {ex.Message}", Severity.Error);
        }
    }

    private string GetMessageClass(Message message)
    {
        return message.SenderId == currentUserId ? "message-row message-row-mine" : "message-row";
    }

    private string GetMessageCardClass(Message message)
    {
        return message.SenderId == currentUserId ? "message-card message-card-mine" : "message-card";
    }

    private string GetInitials(ApplicationUser user)
    {
        var name = user.DisplayName ?? user.UserName ?? "?";
        return name.Length > 0 ? name[0].ToString().ToUpper() : "?";
    }

    private Color GetAvatarColor(string userId)
    {
        if (!userColors.ContainsKey(userId))
        {
            var colors = new[] { Color.Primary, Color.Secondary, Color.Tertiary, Color.Info, Color.Success, Color.Warning };
            userColors[userId] = colors[random.Next(colors.Length)];
        }
        return userColors[userId];
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await Task.Delay(50); // Brief delay to ensure DOM is updated
            await JS.InvokeVoidAsync("scrollToBottom", messageContainerRef);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Scroll error: {ex.Message}");
            Snackbar.Add($"Scroll error: {ex.Message}", Severity.Warning);
        }
    }
}