@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using RealtimeChat.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<style>
   

    .profile-container {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        background: linear-gradient(145deg, #1a1a27, #151521);
    }

    .glass-card {
        background: rgba(30, 30, 45, 0.85);
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.05);
        padding: 2rem;
        width: 100%;
        max-width: 500px;
    }

    h3 {
        margin-bottom: 1.5rem;
        color: #b2b0bf;
    }

    .form-floating input.form-control {
        background-color: rgba(255, 255, 255, 0.05);
        color: white;
        border-radius: 8px;
        padding: 12px 16px;
    }

    .form-floating label.form-label {
        color: #92929f;
    }

    .form-floating input:focus {
        background-color: rgba(255, 255, 255, 0.1);
        box-shadow: 0 0 0 2px rgba(126, 111, 255, 0.3);
    }

    .text-danger {
        color: #ff3f5f;
        font-size: 0.875em;
    }

    .btn-primary {
        background-color: #7e6fff;
        color: white;
        border: none;
        padding: 12px;
        font-weight: 500;
        border-radius: 8px;
        width: 100%;
        transition: background-color 0.3s ease;
    }

    .btn-primary:hover {
        background-color: #6a5dff;
    }

    .alert {
        background-color: rgba(126, 111, 255, 0.1);
        color: #b2b0bf;
        padding: 12px;
        border-radius: 8px;
        margin-bottom: 1rem;
    }
</style>

<div class="profile-container">
    <div class="glass-card">
        <h3>Change password</h3>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert" role="alert">@message</div>
        }

        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <AntiforgeryTokenInput />

            <div class="form-floating mb-3">
                <InputText type="password"
                           @bind-Value="Input.OldPassword"
                           class="form-control"
                           autocomplete="current-password"
                           aria-required="true"
                           placeholder="Please enter your old password." />
                <label for="old-password" class="form-label">Old password</label>
                <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password"
                           @bind-Value="Input.NewPassword"
                           class="form-control"
                           autocomplete="new-password"
                           aria-required="true"
                           placeholder="Please enter your new password." />
                <label for="new-password" class="form-label">New password</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password"
                           @bind-Value="Input.ConfirmPassword"
                           class="form-control"
                           autocomplete="new-password"
                           aria-required="true"
                           placeholder="Please confirm your new password." />
                <label for="confirm-password" class="form-label">Confirm password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Update password</button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}