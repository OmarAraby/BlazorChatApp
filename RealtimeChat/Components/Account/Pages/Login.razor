@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using RealtimeChat.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<style>
    /* body {
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #1a1a27;
        color: #b2b0bf;
    } */

    .login-container {
        max-height: 90vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        background: linear-gradient(145deg, #1a1a27, #151521);
        margin: 0;
    }

    .glass-card {
        background: rgba(30, 30, 45, 0.85);
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.05);
        padding: 2rem;
        width: 100%;
        max-width: 450px;
    }

    h1 {
        text-align: center;
        font-weight: 600;
        font-size: 1.8rem;
        margin-bottom: 1rem;
        color: #b2b0bf;
    }

    .form-floating {
        margin-bottom: 1.5rem;
    }

    .form-control {
        background-color: rgba(255, 255, 255, 0.05);
        border: none;
        color: white;
        border-radius: 8px;
        padding: 12px 16px;
    }

        .form-control::placeholder {
            color: #92929f;
        }

        .form-control:focus {
            background-color: rgba(255, 255, 255, 0.1);
            box-shadow: 0 0 0 2px rgba(126, 111, 255, 0.3);
        }

    label.form-label {
        color: #92929f;
    }

    .checkbox label {
        cursor: pointer;
        color: #92929f;
    }

    .btn-primary {
        background-color: #7e6fff;
        color: white;
        border: none;
        padding: 12px;
        font-weight: 500;
        border-radius: 8px;
        width: 100%;
        transition: background-color 0.3s ease;
    }

        .btn-primary:hover {
            background-color: #6a5dff;
        }

    a {
        color: #4a86ff;
        text-decoration: underline;
    }

        a:hover {
            color: #7e6fff;
        }

    .text-danger {
        color: #ff3f5f;
        font-size: 0.875em;
        margin-top: 4px;
    }

    hr {
        border-color: #292838;
        margin: 2rem 0;
    }

    .validation-message {
        color: #ff3f5f;
        font-size: 0.875em;
    }
</style>

<div class="login-container">
    <div class="glass-card">
        <h1>Welcome Back</h1>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating">
                <InputText @bind-Value="Input.Email"
                           class="form-control"
                           autocomplete="username"
                           aria-required="true"
                           placeholder="name@example.com" />
                <label for="email">Email address</label>
                <ValidationMessage For="() => Input.Email" class="validation-message" />
            </div>

            <div class="form-floating">
                <InputText type="password"
                           @bind-Value="Input.Password"
                           class="form-control"
                           autocomplete="current-password"
                           aria-required="true"
                           placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="validation-message" />
            </div>

            <div class="checkbox mb-3 d-flex align-items-center">
                <label class="form-check-label me-2">
                    <InputCheckbox @bind-Value="Input.RememberMe"
                                   class="form-check-input" />
                    Remember me
                </label>
            </div>

            <button type="submit" class="btn btn-primary">Log in</button>

            <div class="text-center mt-4">
                <p><a href="Account/ForgotPassword">Forgot your password?</a></p>
                <p>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                        Register as a new user
                    </a>
                </p>
                <p><a href="Account/ResendEmailConfirmation">Resend email confirmation</a></p>
            </div>
        </EditForm>



      
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(
            Input.Email,
            Input.Password,
            Input.RememberMe,
            lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new Dictionary<string, object?>
                {
                    ["returnUrl"] = ReturnUrl,
                    ["rememberMe"] = Input.RememberMe
                });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}