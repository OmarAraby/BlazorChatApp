@page "/Account/RegisterConfirmation"
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using RealtimeChat.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
    <MudPaper Elevation="4" Class="pa-6">
        <MudText Typo="Typo.h4" Color="Color.Primary" GutterBottom="true">
            Register Confirmation
        </MudText>

        <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
            <StatusMessage Message="@statusMessage" />
        </MudText>

        @if (emailConfirmationLink is not null)
        {
            <MudText Typo="Typo.body1" Class="mb-4">
                This app does not currently have a real email sender registered. See
                <MudLink Href="https://aka.ms/aspaccountconf" Target="_blank" Typo="Typo.body1" Color="Color.Info">
                    these docs
                </MudLink>
                for how to configure a real email sender. Normally this would be emailed:
                <MudLink Href="@emailConfirmationLink" Typo="Typo.body1" Color="Color.Primary">
                    Click here to confirm your account
                </MudLink>
            </MudText>
        }
        else
        {
            <MudText Typo="Typo.body1" Color="Color.Secondary">
                Please check your email to confirm your account.
            </MudText>
        }
    </MudPaper>
</MudContainer>

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        }
    }
}