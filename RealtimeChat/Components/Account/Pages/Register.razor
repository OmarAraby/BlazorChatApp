@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using RealtimeChat.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<style>
    body {
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #1a1a27;
        color: #b2b0bf;
    }

    .login-container {
        max-height: 90vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        background: linear-gradient(145deg, #1a1a27, #151521);
    }

    .glass-card {
        background: rgba(30, 30, 45, 0.85);
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.05);
        padding: 2rem;
        width: 100%;
        max-width: 500px;
    }

    h1 {
        text-align: center;
        font-weight: 600;
        font-size: 1.8rem;
        margin-bottom: 2rem;
        color: #b2b0bf;
    }

    .form-floating {
        margin-bottom: 1.5rem;
    }

    .form-control {
        background-color: #92929f;
        border: none;
        color: white;
        border-radius: 8px;
        padding: 12px 16px;
    }

    .form-control::placeholder {
        color: #92929f;
    }

    .form-control:focus {
            background-color: #92929f ;
            box-shadow: 0 0 0 2px rgba(126, 111, 255, 0.3);
    }

    label.form-label {
        color: wheat;
    }

    .btn-primary {
        background-color: #7e6fff;
        color: white;
        border: none;
        padding: 12px;
        font-weight: 500;
        border-radius: 8px;
        width: 100%;
        transition: background-color 0.3s ease;
    }

    .btn-primary:hover {
        background-color: #6a5dff;
    }

    a {
        color: #4a86ff;
        text-decoration: underline;
    }

    a:hover {
        color: #7e6fff;
    }

    .text-danger {
        color: #ff3f5f;
        font-size: 0.875em;
        margin-top: 4px;
    }

    .validation-message {
        color: #ff3f5f;
        font-size: 0.875em;
    }

    hr {
        border-color: #292838;
        margin: 2rem 0;
    }

    .alert {
        background-color: rgba(255, 63, 95, 0.1);
        color: #ff3f5f;
        padding: 12px;
        border-radius: 8px;
        margin-bottom: 1rem;
    }
</style>

<div class="login-container">
    <div class="glass-card">
        <h1>Register</h1>

        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert" role="alert">
                @Message
            </div>
        }

        <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <AntiforgeryTokenInput />

            <div class="form-floating">
                <InputText @bind-Value="Input.Email"
                           class="form-control"
                           autocomplete="username"
                           aria-required="true"
                           placeholder="name@example.com" />
                <label for="email">Email address</label>
                <ValidationMessage For="() => Input.Email" class="validation-message" />
            </div>

            <div class="form-floating">
                <InputText type="password"
                           @bind-Value="Input.Password"
                           class="form-control"
                           autocomplete="new-password"
                           aria-required="true"
                           placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="validation-message" />
            </div>

            <div class="form-floating">
                <InputText type="password"
                           @bind-Value="Input.ConfirmPassword"
                           class="form-control"
                           autocomplete="new-password"
                           aria-required="true"
                           placeholder="confirm password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="validation-message" />
            </div>

            <button type="submit" class="btn btn-primary">Register</button>
        </EditForm>

        <hr />

        <div class="text-center mt-3">
            <p>
                Already have an account?
                <a href="Account/Login@(string.IsNullOrEmpty(ReturnUrl) ? "" : $"?returnUrl={Uri.EscapeDataString(ReturnUrl)}")">
                    Log in
                </a>
            </p>
        </div>

       
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}